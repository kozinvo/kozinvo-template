*,::after,::before{padding:0;margin:0;-webkit-box-sizing:border-box;box-sizing:border-box}a{text-decoration:none;color:inherit}li,ol,ul{list-style:none}img{vertical-align:top}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}body,html{line-height:1;height:100%}html{scroll-behavior:smooth}body{font:1.375rem "Montserrat",Arial,Helvetica,sans-serif;background:#b4b2b2;color:#000}button{background:inherit;cursor:pointer}button,input,textarea{font:inherit inherit inherit;color:inherit}@font-face{font-family:"Montserrat";src:url(../font/Montserrat-Regular.woff2) format("woff2"),url(../font/Montserrat-Regular.woff) format("woff"),url(../font/Montserrat-Regular.ttf) format("ttf"),url(../font/Montserrat-Regular.eot) format("eot")}.wrapper{overflow:clip;min-height:100%;display:grid;grid-template-rows:auto 1fr auto}[class*=__container]{max-width:91.875rem;padding-inline:.9375rem;margin-inline:auto}section:not(:last-child):not(:first-child){margin-block:80px}.header{position:sticky;top:0;left:0;width:100%;background:#605f5f}.header__container,.menu__list{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.header__container{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;gap:15px;min-height:80px}.header__logo img{height:60px}.menu__list{font-size:1.5rem;-webkit-column-gap:40px;-moz-column-gap:40px;column-gap:40px;row-gap:5px;-ms-flex-wrap:wrap;flex-wrap:wrap}.menu__link{position:relative;-webkit-transition:all .3s;-o-transition:all .3s;transition:all .3s}.menu__link::after{position:absolute;content:"";left:50%;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);bottom:-5px;display:block;width:0;height:2px;background:#000;-webkit-transition:.3s;-o-transition:.3s;transition:.3s}.menu__link:hover{opacity:.7}.menu__link:hover:after{width:100%;opacity:.7}.icon-menu{display:none}.news{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.title{text-transform:uppercase}@media (max-width:700px){body{color:red}.news{color:green}.title{color:#00f}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */